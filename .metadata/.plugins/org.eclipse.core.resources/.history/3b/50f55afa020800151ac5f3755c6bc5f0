import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.DecimalFormat;

import Jama.Matrix;

import utils.AdjacentMatrix;
import utils.BubbleSort;
import utils.Global;

public class Modularity {
	public static DecimalFormat myformat = new DecimalFormat("#0");
	public static DecimalFormat myformat2 = new DecimalFormat("#0.0000 ");
	public static int nodesNum, edgesNum;
	public static double[][] EV;//B������ֵ
	public static double[] ED;//B����������
	public static Boolean update = false;
	/*public static double[][] array={
		{0,1,1,1,0,0,0,0,0},
		{1,0,1,0,0,0,0,0,0},
		{1,1,0,1,0,0,0,0,0},
		{1,0,1,0,1,1,0,0,0},
		{0,0,0,1,0,1,1,1,0},
		{0,0,0,1,1,0,1,1,0},
		{0,0,0,0,1,1,0,1,1},
		{0,0,0,0,1,1,1,0,0},
		{0,0,0,0,0,0,1,0,0},
};*/

	/**
	 * @param args
	 * @throws FileNotFoundException 
	 */
	public static void print(double[][] A,int n1,int n2) {
		
		for (int i = 0; i < n1; i++) {
			for (int j = 0; j < n2; j++) {
				System.out.print(myformat2.format(A[i][j]) + " ");
			}
			System.out.println();
		}
	}

	public static double[][] readFileToInitializeAdjacentArray(File file)
			throws IOException {
		double[][] A;
		BufferedReader reader = null;
		String tmpStr = null;
		String[] strLine = null;
		

		reader = new BufferedReader(new FileReader(file));

		tmpStr = reader.readLine();
		strLine = tmpStr.split(" ");
		nodesNum = Integer.parseInt(strLine[0]);
		int n = nodesNum;
		edgesNum = Integer.parseInt(strLine[1]);
		A = new double[n][n];// ��ʼ��Ĭ��ȫΪ0
		ED = new double[n];
		EV = new double[n][n];
		//print(A);
		
		
		while ((tmpStr = reader.readLine()) != null) {
			strLine = tmpStr.split(" |,");
			int i = Integer.parseInt(strLine[0]);
			int j = Integer.parseInt(strLine[1]);
			A[i - 1][j - 1] = 1;//���data.txt
			A[j - 1][i - 1] = 1;
			//A[i][j] = 1;//���test.txt
			//A[j][i] = 1;
		}
		// print(A);
		reader.close();
		return A;
	}
	public static double[] computeDegree(double[][] A){
		int n = A[0].length;
		
		double[] degree = new double[n]; 
		
		int k =0;
		for(int i =0 ; i<n;i++){
			double temSum = 0;
			
			for(int j=0;j<n;j++){
				temSum = temSum + A[i][j];
			}
			degree[k] = temSum;
			k++;
		}
		System.out.print("���ڵ����Ϊ��");
		
		for(int i =0;i<n;i++){
			System.out.print(myformat.format(degree[i])+" ");
		}
		System.out.println();
		return degree;
	}
	public static void computeBMatrixEigenvalues(double[][] array){
		double[] degree = computeDegree(array);
		Matrix d = new Matrix(degree,nodesNum);//��������
		Matrix Tmp ;
		//Tmp = d.arrayTimes(d.inverse());//�����
		Tmp = d.times(d.transpose());//�����ת��Tmp=d*dT
		Tmp = Tmp.times(1.0/(2*edgesNum));//Tmp = d*dT*1/(2*m)
		
		Matrix A = new Matrix(array);//����һ������
		Matrix B = A.minus(Tmp);//B = A - 1/2m * d * dT
		//B.print(5,2);
		int n = array[0].length;
		
		System.out.println("����ֵΪ��");
		for(int i=0;i<n;i++){//��ȡ����ֵ����ѡȡ��������ֵ
			ED[i] = B.eig().getD().get(i, i);
			
			System.out.print(myformat2.format(ED[i])+" ");//���ÿһ������ֵ
			for(int j =0;j<n;j++){
				EV[i][j] = B.eig().getV().get(i,j);
			}
		}
		System.out.println();
		//for(int i =0;i<n;i++){//ֻ������һ������ֵ
			//System.out.println(myformat2.format(EV[i][76]));
		//}
		//print(EV);
		
		
		System.out.println("��Ӧ�����������ǣ�");
		B.eig().getV().print(5, 2);
		

		/*
		double[] test = {-0.44,-0.38,-0.44,-0.17,0.29,0.29,0.38,0.34,0.14};
		//double[] test = {0.44,0.38,0.44,0.17,-0.29,-0.29,-0.38,-0.34,-0.14};
		Matrix dtest = new Matrix(test,9);//��������
		B.times(dtest).print(5,2);
		dtest.times(2.47).print(5,2);*/
		
		

	}



	public static void findGroups() {
		update = false;
		
		int n = nodesNum;
		double[][] tmp;
		int[] nodesIndex = new int[n];
		for (int i = 0; i < n; i++)
			nodesIndex[i] = i + 1;
		// for(int k =0;k<=4;k++){
		int k = 2;//�ֳ�k��
		/*BubbleSort.bubbleSortForDoubleArray(ED, nodesIndex);
		System.out.println("����������ֵ��");
		for (int i = 0; i < n; i++) {
			System.out.print(myformat2.format(ED[i])+ ":"+nodesIndex[i]+"   ");
		}*/
		//System.out.println("����������ֵ��Ӧ�������ǣ�");
		//for (int i = 0; i < n; i++) {
			//System.out.print(nodesIndex[i]+" ");
		//}
		System.out.println();
		/*for (int i = 0; i < n; i++) {
			System.out.print(nodesIndex[i] + " ");
		}*/
		
		tmp = new double[n][k];
		for(int i =0;i<n;i++){
			for(int j =0;j<k;j++){
				tmp[i][j] = EV[i][nodesIndex[j]-1];//tmp[][]i��k��
			}
		}
		//print(tmp);
		double[][] centers = new double[k][k];//k������ֵ
		for (int i = 0; i < k; i++) {
			for (int j = 0; j < k; j++) {
				centers[i][j] = tmp[i][j];// ��tmp[][]�ĵ�һ������Ϊ��ʼ����
			}
		}
		print(centers,k,k);
		
		int[] tagArr = new int[nodesNum];
		double[][] distance = new double[nodesNum][k];
		computeKmeans(centers,tmp,tagArr,distance,k);
		
		for(int i =0;i<n;i++){
			System.out.print(tagArr[i]+" ");
			
		}
		System.out.println();
		
		while(update == true){//ֻҪ�и���  ��Ҫ���µ�����k-means
			update = false;
			//��������ֵ
			//int centerRow = 0;
			double center01=0;int center01Num = 0;
			double center02=0;int center02Num = 0;
			//int center01=0;
			int m=0;
			//while (centerRow < k) {
				while (m < k) {
					for (int i = 0; i < n; i++) {
						if (tagArr[i] == 0) {
							center01 = center01 + tmp[i][m];
							center01Num++;
						} else if (tagArr[i] == 1) {
							center02 = center02 + tmp[i][m];
							center02Num++;
						}
					}
					centers[0][m] = center01 / center01Num;
					centers[1][m] = center02 / center02Num;
					m++;
					center01 = 0;center01Num=0;
					center02 = 0;center02Num=0;
				}
				//centerRow++;
			//}
			
			print(centers,k,k);
			
			
			
			computeKmeans(centers,tmp,tagArr,distance,k);
			for(int i =0;i<n;i++){
				System.out.print(tagArr[i]+" ");
			}
			System.out.println();
		}//else{
			for(int i =0;i<n;i++){
				System.out.print(tagArr[i]+" ");
			}
			System.out.println();
		 //}
	}
	public static int findMinDis(double[] d){
		//int m = d.length;
		int minIndex = 0;
		double min =d[0];
		for(int i =1;i<d.length;i++){
			if(d[i]<min){
				min = d[i];
				minIndex = i;
			}
		}
		
		return minIndex;
	}
	
	public static void computeKmeans(double[][] centers,double[][] tmp,int[] tagArr,double[][] distance,int k){
		
		for (int i = 0; i < nodesNum; i++) {// k������k����//��i���ڵ�
			int m = 0, centerRow = 0;
			while (centerRow < k) {
				double dis = 0;
				while (m < k) {// ��m��
					// dis = dis + Math.pow(a, 2);
					dis = dis + Math.pow(tmp[i][m] - centers[centerRow][m], 2);
					m++;
				}
				m = 0;
				distance[i][centerRow] = Math.sqrt(dis);
				centerRow++;
			}
		}//for
		print(distance,nodesNum,k);
		
		for(int i =0;i<nodesNum;i++){
			int tag = findMinDis(distance[i]);
			if(tagArr[i] != tag){
				tagArr[i] = tag;
				update = true;
			}
		}
	}
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		File file = new File("C:/Users/Yoga/Desktop/��һ�����γ�/�罻ý������/����ҵ/data.txt");
		double[][] A = readFileToInitializeAdjacentArray(file);
		
		//print(A);
		computeBMatrixEigenvalues(A);
		
		findGroups();
	}

}
